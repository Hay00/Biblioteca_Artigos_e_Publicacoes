/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.acme.gui;

import br.com.acme.AcademicLibrary;
import br.com.acme.Author;
import br.com.acme.Book;
import br.com.acme.logic.ALManager;
import com.sun.glass.events.KeyEvent;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vinicios, gabid
 */
public class SearchBooksForm extends javax.swing.JDialog {

    /**
     * Creates new form SearchBooksForm
     */
    private AcademicLibrary library;

    public SearchBooksForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        library = ALManager.getInstance();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtfSearchBar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtBooksSearched = new javax.swing.JTable();
        jcbSearchOptions = new javax.swing.JComboBox<>();
        jbSearch = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Search Books");

        jtfSearchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfSearchBarKeyPressed(evt);
            }
        });

        jtBooksSearched.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Authors", "Year", "Volume", "Language", "ISBN", "Number of Pages"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Short.class, java.lang.Byte.class, java.lang.Object.class, java.lang.Long.class, java.lang.Short.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtBooksSearched);

        jcbSearchOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Isbn" }));

        jbSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/jmb/publications/search.png"))); // NOI18N
        jbSearch.setText("Search");
        jbSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSearchActionPerformed(evt);
            }
        });

        jLabel2.setText("Find Book:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfSearchBar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(300, 300, 300)
                                .addComponent(jLabel1)))
                        .addGap(18, 18, 18)
                        .addComponent(jcbSearchOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbSearchOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSearch)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jtfSearchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfSearchBarKeyPressed
        // Atalho do jtfSearchBar para o botão de pesquisa.
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jbSearchActionPerformed(null);
        }
    }//GEN-LAST:event_jtfSearchBarKeyPressed

    private void jbSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSearchActionPerformed
        // Busca o book se possível.
        if (jtfSearchBar.getText().trim().isEmpty()) {
            DefaultTableModel model = (DefaultTableModel) jtBooksSearched.getModel();
            model.setRowCount(0);
        } else {
            if (jcbSearchOptions.getSelectedIndex() == 0) {
                // Busca pelo Title

                String findThis = jtfSearchBar.getText();
                populateTable(library.findBook(findThis));
            } else if (jcbSearchOptions.getSelectedIndex() == 1 && jtfSearchBar.getText().trim().matches("[0-9]+")) {
                // Buscsa pelo ISBN.
                DefaultTableModel model = (DefaultTableModel) jtBooksSearched.getModel();
                Long is = Long.parseLong(jtfSearchBar.getText());
                Book b = library.findBook(is);
                if (b != null) {
                    //Caso encontre algo.

                    model.setRowCount(0);

                    String authorName = "";
                    for (Author aut : b.getAuthors()) {
                        authorName = authorName + aut.getName();
                    }

                    // Joga os dados na tabela.
                    model.addRow(new Object[]{b.getTitle(), authorName, b.getYear(), b.getVolume(), b.getLanguage(), b.getIsbn(), b.getPages()});
                } else {
                    // Se não encontrou nada é limpado a tela.
                    model.setRowCount(0);
                }
            }
        }
    }//GEN-LAST:event_jbSearchActionPerformed

    /**
     * Coloca as informações na tabela dependendo da pesquisa do usuário.
     *
     * @param booksFound books que foram encontrados.
     */
    private void populateTable(ArrayList<Book> booksFound) {
        DefaultTableModel model = (DefaultTableModel) jtBooksSearched.getModel();
        model.setRowCount(0);

        for (Book b : booksFound) {
            String authorName = "";
            for (Author aut : b.getAuthors()) {
                authorName = authorName + aut.getName();
            }
            model.addRow(new Object[]{b.getTitle(), authorName, b.getYear(), b.getVolume(), b.getLanguage(), b.getIsbn(), b.getPages()});
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchBooksForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchBooksForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchBooksForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchBooksForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbSearch;
    private javax.swing.JComboBox<String> jcbSearchOptions;
    private javax.swing.JTable jtBooksSearched;
    private javax.swing.JTextField jtfSearchBar;
    // End of variables declaration//GEN-END:variables
}
